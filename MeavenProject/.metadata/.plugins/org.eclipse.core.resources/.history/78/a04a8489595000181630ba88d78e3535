package com.price_recomendation;

import org.jsoup.Jsoup;
import org.jsoup.helper.Validate;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Stream;

/**
* Example program to list links from a URL.
*/
public class Crawler {
	
	public Crawler(){}
	
	public void crawlPage() throws IOException{
	      //Validate.isTrue(args.length == 2, "usage: supply url to fetch");
	      String categoryName = "Bilar";
	      String query = "volvo v70";
	      //if (!args[1].isEmpty()){
	      //    categoryName = args[1];
	      //}
	      
          HashMap<Integer, String> catCode2Str = new HashMap<Integer, String>();
          HashMap<String, Integer> catStr2Code = new HashMap<String, Integer>();

	      String fileName = "src\\main\\resources\\Categories";
	      InputStream is = new FileInputStream(fileName);
	      BufferedReader buf = new BufferedReader(new InputStreamReader(is));
	      
	      String line = buf.readLine();
	      while(line != null){
	    	  String newLine = line.toString();
	    	  Integer catCode = Integer.parseInt(newLine.split("\\s")[0]);
	    	  String catName = newLine.split("\\s")[1];
	    	  catCode2Str.put(catCode,catName);
	    	  catStr2Code.put(catName, catCode);
	    	  line = buf.readLine();
	      }
	      buf.close();
	      
	      query = query.replaceAll("\\s+", "+");
	      
	      String url = "https://www.blocket.se/hela_sverige?q=" + query;
	      print("Fetching %s...", url);
	      
	      url = "https://www.blocket.se/hela_sverige?q=" + query + "&cg=" + "1020";
          System.out.println(url);

	      Document doc = Jsoup.connect(url).get();
	      //Elements links = doc.select("a[href]");
	      Elements imports = doc.select("link[href]");
	      Element numb_hits = doc.select("span.num_hits").first();
	      
	      int numResults = Integer.parseInt(numb_hits.text());
	     

	      print("\nImports: (%d)", imports.size());
	      for (Element link : imports) {
	          print(" * %s <%s> (%s)", link.tagName(),link.attr("abs:href"), link.attr("rel"));
	      }

	      
	      
	      if (numResults == 0){
	          System.out.println(" No results");
	      }
	      else{
	          System.out.println( numResults + " results for searched query");
	          Elements prices = doc.select("p[itemprop=price]");
	          
	          List<Integer> priceList = new ArrayList<Integer>();
	          int price;
	          int numAdsPrices = 0;
	          for (Element priceElem : prices){
	              if (!priceElem.text().equals("")){
	              price = Integer.parseInt(priceElem.text().split("kr")[0].replaceAll("[^0-9.]", ""));
	              System.out.print(price);
	              System.out.println(" from: " + priceElem.text());
	              priceList.add(numAdsPrices, price);
	              numAdsPrices += 1;
	              }
	          }
	          System.out.println(" Number of ads with prices " + numAdsPrices);
	          if(numAdsPrices == 0){
	              System.out.println(" The result don't have any price labeled");
	          }else{
	              Elements categories = doc.select("option.mls[^value]");
	              HashMap<String, Integer> categoriesMap = new HashMap<String, Integer>();
	              for (Element cat : categories){
	                  System.out.println(Integer.parseInt(cat.attr("value")) + " " + cat.text());
	                  
	                  categoriesMap.put(cat.text(), Integer.parseInt(cat.attr("value")));
	              }

	              
	          }
	      }  
	}
 

  private static void print(String msg, Object... args) {
      System.out.println(String.format(msg, args));
  }

  private static String trim(String s, int width) {
      if (s.length() > width)
          return s.substring(0, width-1) + ".";
      else
          return s;
  }
}

